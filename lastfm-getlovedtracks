#!/usr/bin/env perl
# Copyright 2008-2016 Kevin Spencer <kevin@kevinspencer.org>
#
# Permission to use, copy, modify, distribute, and sell this software and its
# documentation for any purpose is hereby granted without fee, provided that
# the above copyright notice appear in all copies and that both the
# copyright notice and this permission notice appear in supporting
# documentation.  No representations are made about the suitability of this
# software for any purpose.  It is provided "as is" without express or 
# implied warranty.
#
################################################################################
#
# Uses the last.fm API (http://www.last.fm/api/intro) to find my most recently
# listened to tracks.  Requires a last.fm API key.
#
################################################################################

use Data::Dumper;
use Env '@PATH';
use File::HomeDir;
use File::stat;
use Getopt::Long;
use JSON::XS;
use LWP::UserAgent;
use URI;
use strict;
use warnings;

our $VERSION = '0.7';

$Data::Dumper::Indent = 1;

my ($track_count, $lastfm_user, $force, $twitter, $debug);
GetOptions("count=i" => \$track_count, "user=s" => \$lastfm_user, "twitter" => \$twitter, "debug" => \$debug, "force" => \$force);

die "No user provided, lastfm-getlovedtracks --user oldmanrivers\n" if (! $lastfm_user);

my $twitter_poster = 'burdie';
# if we're posting to twitter, ensure burdie is in our path
if ($twitter) {
    push(@PATH, File::HomeDir->my_home() . '/bin');
    if (! grep -x "$_/$twitter_poster", @PATH) {
        die "You wanted to post to Twitter but I can't find any tool to do that.\n";
    }
}

my $api_key = $ENV{LFM_API_KEY} or die "No last.fm API key found\n";

# how many tracks should we retrieve?
$track_count ||= 3;

# no user serviceable params below this point

my $last_ran_filename  = File::HomeDir->my_home() . '/.lastfm-getlovedtracks.lastran';
my $last_ran_timestamp = -e $last_ran_filename ? stat($last_ran_filename)->mtime() : 0;

my $api_url = 'http://ws.audioscrobbler.com/2.0/';
my $uri = URI->new($api_url);
my %params = (
    api_key => $api_key,
    method  => 'user.getlovedtracks',
    user    => $lastfm_user,
    limit   => $track_count,
    format  => 'json'
);
$uri->query_form(%params);

my $ua = LWP::UserAgent->new();
$ua->agent('getlovedtracks/' . $VERSION);
my $response = $ua->get($uri);
if (! $response->is_success()) {
    die "Error when communicating with $api_url: " . 
        $response->status_line(), "\n";
}

my $data = decode_json($response->content());
if ($data->{error}) {
    # we received an error from last.fm...
    die "ERROR $data->{error}: $data->{message}\n";
}

print Dumper $data if ($debug);

my $loved_string;
for my $track_info (@{$data->{lovedtracks}{track}}) {
    if (($force) || ($track_info->{date}{uts} >= $last_ran_timestamp)) {
        # if we have recent tracks, download the large image...
        my $tempfile  = '/var/tmp/' . time() . '.png';
        my $response  = $ua->get($track_info->{image}[3]->{'#text'}, ":content_file" => $tempfile);
        $loved_string = "Loved $track_info->{name} by $track_info->{artist}{name} on last.fm, $track_info->{url}";
        print $loved_string, "\n";
        # TODO: instead of shelling out, incorporate burdie code here...
        if ($twitter) {
            my $shell_command;
            if (! -s $tempfile) {
                print "$tempfile does not exist, skipping image upload.\n";
                $shell_command = "$twitter_poster \Q$loved_string\E";
            } else {
                $shell_command = "$twitter_poster --sendimage $tempfile \Q$loved_string\E";
            }
            my $result = `$shell_command`;
            print $result, "\n";
        }
    }
}

# if we're not posting to twitter, assume dry run mode and don't touch $last_ran_filename
exit() if (! $twitter);

open(my $fh, '>', $last_ran_filename) || die "Could not create $last_ran_filename - $!\n";
close($fh);
